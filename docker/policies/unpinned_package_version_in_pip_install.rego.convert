package $namespace.$type.$policyid

__rego_metadata__ := {
    "id": "XYZ-1234",
    "title": "My rule",
    "version": "v1.0.0",
    "severity": "HIGH",
    "type": "Some security check",
}

deny[res] {
    	resource := input.document[i].command[name][_]
	resource.Cmd == "run"

	count(resource.Value) == 1
	commands := resource.Value[0]

	yum := regex.find_n("pip(3)? (-(-)?[a-zA-Z]+ *)*install", commands, -1)
	yum != null

	packages = dockerLib.getPackages(commands, yum)
	length := count(packages)

	some j
	analyzePackages(j, packages[j], packages, length)

	resource := input.document[i].command[name][_]
	resource.Cmd == "run"

	count(resource.Value) > 1

	isPip(resource.Value)

	resource.Value[j] != "install"
	resource.Value[j] != "pip"
	resource.Value[j] != "pip3"

	regex.match("^[a-zA-Z]", resource.Value[j]) == true
	not dockerLib.withVersion(resource.Value[j])

    res := {
        "msg": "decision message",
        "id": __rego_metadata__.id,
        "title": __rego_metadata__.title,
        "severity": __rego_metadata__.severity,
        "type": __rego_metadata__.type,
    }
}


isPip(command) {
	pip := {"pip", "pip3"}
	contains(command[x], pip[z])
	contains(command[j], "install")
}
analyzePackages(j, currentPackage, packages, length) {
	j == length - 1
	regex.match("^[a-zA-Z]", currentPackage) == true
	not dockerLib.withVersion(currentPackage)
}
analyzePackages(j, currentPackage, packages, length) {
	j != length - 1
	regex.match("^[a-zA-Z]", currentPackage) == true
	packages[plus(j, 1)] != "-v"
	not dockerLib.withVersion(currentPackage)
}
# vim: ts=4:sw=4:expandtab
