package $namespace.$type.$policyid

__rego_metadata__ := {
    "id": "XYZ-1234",
    "title": "My rule",
    "version": "v1.0.0",
    "severity": "HIGH",
    "type": "Some security check",
}

deny[res] {
    	resource := input.document[i].command[name][_]
	resource.Cmd == "run"

	containsCommand(resource) == true

    res := {
        "msg": "decision message",
        "id": __rego_metadata__.id,
        "title": __rego_metadata__.title,
        "severity": __rego_metadata__.severity,
        "type": __rego_metadata__.type,
    }
}


hasInstall(cmds) {
	is_array(cmds) == true
	contains(cmds[_], "install")
}
hasInstall(cmd) {
	is_string(cmd) == true
	contains(cmd, "install")
}
containsCommand(cmds) {
	count(cmds.Value) > 1
	not hasInstall(cmds.Value)
	regex.match("\\b(ps|shutdown|service|free|top|kill|mount|ifconfig|nano|vim)\\b", cmds.Value[_])
}
containsCommand(cmds) {
	count(cmds.Value) == 1

	commandsList = split(cmds.Value[0], "&&")

	some i
	not hasInstall(commandsList[i])
	regex.match("\\b(ps|shutdown|service|free|top|kill|mount|ifconfig|nano|vim)\\b ", commandsList[i])
}
containsCommand(cmds) {
	count(cmds.Value) == 1

	commandsList = split(cmds.Value[0], "&&")

	some i
	not hasInstall(commandsList[i])
	regex.match("^\\b(ps|shutdown|service|free|top|kill|mount|ifconfig|nano|vim)\\b$", commandsList[i])
}
# vim: ts=4:sw=4:expandtab
