package $namespace.$type.$policyid

__rego_metadata__ := {
    "id": "XYZ-1234",
    "title": "My rule",
    "version": "v1.0.0",
    "severity": "HIGH",
    "type": "Some security check",
}

deny[res] {
    	resource := input.document[i].command[name][_]
	resource.Cmd == "run"

	count(resource.Value) == 1
	values := resource.Value[0]

	hasCacheFlag(values)

	resource := input.document[i].command[name][_]
	resource.Cmd == "run"

	count(resource.Value) > 1

	isPip(resource.Value)

	not hasCacheFlagInList(resource.Value)

    res := {
        "msg": "decision message",
        "id": __rego_metadata__.id,
        "title": __rego_metadata__.title,
        "severity": __rego_metadata__.severity,
        "type": __rego_metadata__.type,
    }
}


hasCacheFlag(values) {
	commands = split(values, "&&")

	some i
	instruction := commands[i]
	regex.match("pip(3)? (-(-)?[a-zA-Z]+ *)*install", instruction) == true
	not contains(instruction, "--no-cache-dir")
}
isPip(commands) {
	pip := {"pip", "pip3"}
	commands[j] == pip[x]
}
hasCacheFlagInList(commands) {
	contains(commands[j], "--no-cache-dir")
}
# vim: ts=4:sw=4:expandtab
